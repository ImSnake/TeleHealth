// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTimetables(t *testing.T) {
	t.Parallel()

	query := Timetables()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTimetablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimetablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Timetables().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimetablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimetableSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimetablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TimetableExists(ctx, tx, o.DateReception)
	if err != nil {
		t.Errorf("Unable to check if Timetable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TimetableExists to return true, but got false.")
	}
}

func testTimetablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	timetableFound, err := FindTimetable(ctx, tx, o.DateReception)
	if err != nil {
		t.Error(err)
	}

	if timetableFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTimetablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Timetables().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTimetablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Timetables().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTimetablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetableOne := &Timetable{}
	timetableTwo := &Timetable{}
	if err = randomize.Struct(seed, timetableOne, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err = randomize.Struct(seed, timetableTwo, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timetableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timetableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timetables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTimetablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	timetableOne := &Timetable{}
	timetableTwo := &Timetable{}
	if err = randomize.Struct(seed, timetableOne, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err = randomize.Struct(seed, timetableTwo, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timetableOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timetableTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func timetableBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func testTimetablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Timetable{}
	o := &Timetable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, timetableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Timetable object: %s", err)
	}

	AddTimetableHook(boil.BeforeInsertHook, timetableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	timetableBeforeInsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterInsertHook, timetableAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	timetableAfterInsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterSelectHook, timetableAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	timetableAfterSelectHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeUpdateHook, timetableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	timetableBeforeUpdateHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterUpdateHook, timetableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	timetableAfterUpdateHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeDeleteHook, timetableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	timetableBeforeDeleteHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterDeleteHook, timetableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	timetableAfterDeleteHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeUpsertHook, timetableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	timetableBeforeUpsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterUpsertHook, timetableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	timetableAfterUpsertHooks = []TimetableHook{}
}

func testTimetablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimetablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(timetableColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimetablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimetablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimetableSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimetablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Timetables().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	timetableDBTypes = map[string]string{`DateReception`: `datetime`, `DoctorID`: `int`, `PatientID`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                = bytes.MinRead
)

func testTimetablesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(timetableAllColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTimetablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(timetableAllColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Timetable{}
	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timetableDBTypes, true, timetablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(timetableAllColumns, timetablePrimaryKeyColumns) {
		fields = timetableAllColumns
	} else {
		fields = strmangle.SetComplement(
			timetableAllColumns,
			timetablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TimetableSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTimetablesUpsert(t *testing.T) {
	t.Parallel()

	if len(timetableAllColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTimetableUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Timetable{}
	if err = randomize.Struct(seed, &o, timetableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timetable: %s", err)
	}

	count, err := Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, timetableDBTypes, false, timetablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Timetable: %s", err)
	}

	count, err = Timetables().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
