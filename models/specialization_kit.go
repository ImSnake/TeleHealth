// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SpecializationKit is an object representing the database table.
type SpecializationKit struct {
	ID               uint        `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DoctorID         null.Int    `boil:"doctor_id" json:"doctor_id,omitempty" toml:"doctor_id" yaml:"doctor_id,omitempty"`
	SpecializationID null.Int    `boil:"specialization_id" json:"specialization_id,omitempty" toml:"specialization_id" yaml:"specialization_id,omitempty"`
	CertificateN     null.String `boil:"certificate_n" json:"certificate_n,omitempty" toml:"certificate_n" yaml:"certificate_n,omitempty"`
	CertificateURL   null.String `boil:"certificate_url" json:"certificate_url,omitempty" toml:"certificate_url" yaml:"certificate_url,omitempty"`
	Experience       null.Int    `boil:"experience" json:"experience,omitempty" toml:"experience" yaml:"experience,omitempty"`
	CreatedAt        null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *specializationKitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L specializationKitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpecializationKitColumns = struct {
	ID               string
	DoctorID         string
	SpecializationID string
	CertificateN     string
	CertificateURL   string
	Experience       string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "ID",
	DoctorID:         "doctor_id",
	SpecializationID: "specialization_id",
	CertificateN:     "certificate_n",
	CertificateURL:   "certificate_url",
	Experience:       "experience",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// Generated where

var SpecializationKitWhere = struct {
	ID               whereHelperuint
	DoctorID         whereHelpernull_Int
	SpecializationID whereHelpernull_Int
	CertificateN     whereHelpernull_String
	CertificateURL   whereHelpernull_String
	Experience       whereHelpernull_Int
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperuint{field: "`specialization_kit`.`ID`"},
	DoctorID:         whereHelpernull_Int{field: "`specialization_kit`.`doctor_id`"},
	SpecializationID: whereHelpernull_Int{field: "`specialization_kit`.`specialization_id`"},
	CertificateN:     whereHelpernull_String{field: "`specialization_kit`.`certificate_n`"},
	CertificateURL:   whereHelpernull_String{field: "`specialization_kit`.`certificate_url`"},
	Experience:       whereHelpernull_Int{field: "`specialization_kit`.`experience`"},
	CreatedAt:        whereHelpernull_Time{field: "`specialization_kit`.`created_at`"},
	UpdatedAt:        whereHelpernull_Time{field: "`specialization_kit`.`updated_at`"},
}

// SpecializationKitRels is where relationship names are stored.
var SpecializationKitRels = struct {
}{}

// specializationKitR is where relationships are stored.
type specializationKitR struct {
}

// NewStruct creates a new relationship struct
func (*specializationKitR) NewStruct() *specializationKitR {
	return &specializationKitR{}
}

// specializationKitL is where Load methods for each relationship are stored.
type specializationKitL struct{}

var (
	specializationKitAllColumns            = []string{"ID", "doctor_id", "specialization_id", "certificate_n", "certificate_url", "experience", "created_at", "updated_at"}
	specializationKitColumnsWithoutDefault = []string{"doctor_id", "specialization_id", "certificate_n", "certificate_url", "experience"}
	specializationKitColumnsWithDefault    = []string{"ID", "created_at", "updated_at"}
	specializationKitPrimaryKeyColumns     = []string{"ID"}
)

type (
	// SpecializationKitSlice is an alias for a slice of pointers to SpecializationKit.
	// This should generally be used opposed to []SpecializationKit.
	SpecializationKitSlice []*SpecializationKit
	// SpecializationKitHook is the signature for custom SpecializationKit hook methods
	SpecializationKitHook func(context.Context, boil.ContextExecutor, *SpecializationKit) error

	specializationKitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	specializationKitType                 = reflect.TypeOf(&SpecializationKit{})
	specializationKitMapping              = queries.MakeStructMapping(specializationKitType)
	specializationKitPrimaryKeyMapping, _ = queries.BindMapping(specializationKitType, specializationKitMapping, specializationKitPrimaryKeyColumns)
	specializationKitInsertCacheMut       sync.RWMutex
	specializationKitInsertCache          = make(map[string]insertCache)
	specializationKitUpdateCacheMut       sync.RWMutex
	specializationKitUpdateCache          = make(map[string]updateCache)
	specializationKitUpsertCacheMut       sync.RWMutex
	specializationKitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var specializationKitBeforeInsertHooks []SpecializationKitHook
var specializationKitBeforeUpdateHooks []SpecializationKitHook
var specializationKitBeforeDeleteHooks []SpecializationKitHook
var specializationKitBeforeUpsertHooks []SpecializationKitHook

var specializationKitAfterInsertHooks []SpecializationKitHook
var specializationKitAfterSelectHooks []SpecializationKitHook
var specializationKitAfterUpdateHooks []SpecializationKitHook
var specializationKitAfterDeleteHooks []SpecializationKitHook
var specializationKitAfterUpsertHooks []SpecializationKitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SpecializationKit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SpecializationKit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SpecializationKit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SpecializationKit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SpecializationKit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SpecializationKit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SpecializationKit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SpecializationKit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SpecializationKit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specializationKitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpecializationKitHook registers your hook function for all future operations.
func AddSpecializationKitHook(hookPoint boil.HookPoint, specializationKitHook SpecializationKitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		specializationKitBeforeInsertHooks = append(specializationKitBeforeInsertHooks, specializationKitHook)
	case boil.BeforeUpdateHook:
		specializationKitBeforeUpdateHooks = append(specializationKitBeforeUpdateHooks, specializationKitHook)
	case boil.BeforeDeleteHook:
		specializationKitBeforeDeleteHooks = append(specializationKitBeforeDeleteHooks, specializationKitHook)
	case boil.BeforeUpsertHook:
		specializationKitBeforeUpsertHooks = append(specializationKitBeforeUpsertHooks, specializationKitHook)
	case boil.AfterInsertHook:
		specializationKitAfterInsertHooks = append(specializationKitAfterInsertHooks, specializationKitHook)
	case boil.AfterSelectHook:
		specializationKitAfterSelectHooks = append(specializationKitAfterSelectHooks, specializationKitHook)
	case boil.AfterUpdateHook:
		specializationKitAfterUpdateHooks = append(specializationKitAfterUpdateHooks, specializationKitHook)
	case boil.AfterDeleteHook:
		specializationKitAfterDeleteHooks = append(specializationKitAfterDeleteHooks, specializationKitHook)
	case boil.AfterUpsertHook:
		specializationKitAfterUpsertHooks = append(specializationKitAfterUpsertHooks, specializationKitHook)
	}
}

// One returns a single specializationKit record from the query.
func (q specializationKitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SpecializationKit, error) {
	o := &SpecializationKit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for specialization_kit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SpecializationKit records from the query.
func (q specializationKitQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpecializationKitSlice, error) {
	var o []*SpecializationKit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SpecializationKit slice")
	}

	if len(specializationKitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SpecializationKit records in the query.
func (q specializationKitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count specialization_kit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q specializationKitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if specialization_kit exists")
	}

	return count > 0, nil
}

// SpecializationKits retrieves all the records using an executor.
func SpecializationKits(mods ...qm.QueryMod) specializationKitQuery {
	mods = append(mods, qm.From("`specialization_kit`"))
	return specializationKitQuery{NewQuery(mods...)}
}

// FindSpecializationKit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpecializationKit(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*SpecializationKit, error) {
	specializationKitObj := &SpecializationKit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `specialization_kit` where `ID`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, specializationKitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from specialization_kit")
	}

	return specializationKitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SpecializationKit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no specialization_kit provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(specializationKitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	specializationKitInsertCacheMut.RLock()
	cache, cached := specializationKitInsertCache[key]
	specializationKitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			specializationKitAllColumns,
			specializationKitColumnsWithDefault,
			specializationKitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(specializationKitType, specializationKitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(specializationKitType, specializationKitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `specialization_kit` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `specialization_kit` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `specialization_kit` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, specializationKitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into specialization_kit")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == specializationKitMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for specialization_kit")
	}

CacheNoHooks:
	if !cached {
		specializationKitInsertCacheMut.Lock()
		specializationKitInsertCache[key] = cache
		specializationKitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SpecializationKit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SpecializationKit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	specializationKitUpdateCacheMut.RLock()
	cache, cached := specializationKitUpdateCache[key]
	specializationKitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			specializationKitAllColumns,
			specializationKitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update specialization_kit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `specialization_kit` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, specializationKitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(specializationKitType, specializationKitMapping, append(wl, specializationKitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update specialization_kit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for specialization_kit")
	}

	if !cached {
		specializationKitUpdateCacheMut.Lock()
		specializationKitUpdateCache[key] = cache
		specializationKitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q specializationKitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for specialization_kit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for specialization_kit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpecializationKitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specializationKitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `specialization_kit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, specializationKitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in specializationKit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all specializationKit")
	}
	return rowsAff, nil
}

var mySQLSpecializationKitUniqueColumns = []string{
	"ID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SpecializationKit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no specialization_kit provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(specializationKitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSpecializationKitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	specializationKitUpsertCacheMut.RLock()
	cache, cached := specializationKitUpsertCache[key]
	specializationKitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			specializationKitAllColumns,
			specializationKitColumnsWithDefault,
			specializationKitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			specializationKitAllColumns,
			specializationKitPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert specialization_kit, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`specialization_kit`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `specialization_kit` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(specializationKitType, specializationKitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(specializationKitType, specializationKitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for specialization_kit")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == specializationKitMapping["ID"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(specializationKitType, specializationKitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for specialization_kit")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for specialization_kit")
	}

CacheNoHooks:
	if !cached {
		specializationKitUpsertCacheMut.Lock()
		specializationKitUpsertCache[key] = cache
		specializationKitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SpecializationKit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SpecializationKit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SpecializationKit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), specializationKitPrimaryKeyMapping)
	sql := "DELETE FROM `specialization_kit` WHERE `ID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from specialization_kit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for specialization_kit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q specializationKitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no specializationKitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from specialization_kit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for specialization_kit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpecializationKitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(specializationKitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specializationKitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `specialization_kit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, specializationKitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from specializationKit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for specialization_kit")
	}

	if len(specializationKitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SpecializationKit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpecializationKit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpecializationKitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpecializationKitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specializationKitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `specialization_kit`.* FROM `specialization_kit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, specializationKitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpecializationKitSlice")
	}

	*o = slice

	return nil
}

// SpecializationKitExists checks if the SpecializationKit row exists.
func SpecializationKitExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `specialization_kit` where `ID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if specialization_kit exists")
	}

	return exists, nil
}
