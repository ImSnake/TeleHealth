// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSpecializationKits(t *testing.T) {
	t.Parallel()

	query := SpecializationKits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSpecializationKitsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationKitsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SpecializationKits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationKitsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpecializationKitSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationKitsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SpecializationKitExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SpecializationKit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SpecializationKitExists to return true, but got false.")
	}
}

func testSpecializationKitsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	specializationKitFound, err := FindSpecializationKit(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if specializationKitFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSpecializationKitsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SpecializationKits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSpecializationKitsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SpecializationKits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSpecializationKitsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	specializationKitOne := &SpecializationKit{}
	specializationKitTwo := &SpecializationKit{}
	if err = randomize.Struct(seed, specializationKitOne, specializationKitDBTypes, false, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}
	if err = randomize.Struct(seed, specializationKitTwo, specializationKitDBTypes, false, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = specializationKitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = specializationKitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SpecializationKits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSpecializationKitsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	specializationKitOne := &SpecializationKit{}
	specializationKitTwo := &SpecializationKit{}
	if err = randomize.Struct(seed, specializationKitOne, specializationKitDBTypes, false, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}
	if err = randomize.Struct(seed, specializationKitTwo, specializationKitDBTypes, false, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = specializationKitOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = specializationKitTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func specializationKitBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func specializationKitAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SpecializationKit) error {
	*o = SpecializationKit{}
	return nil
}

func testSpecializationKitsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SpecializationKit{}
	o := &SpecializationKit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, specializationKitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SpecializationKit object: %s", err)
	}

	AddSpecializationKitHook(boil.BeforeInsertHook, specializationKitBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	specializationKitBeforeInsertHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.AfterInsertHook, specializationKitAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	specializationKitAfterInsertHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.AfterSelectHook, specializationKitAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	specializationKitAfterSelectHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.BeforeUpdateHook, specializationKitBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	specializationKitBeforeUpdateHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.AfterUpdateHook, specializationKitAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	specializationKitAfterUpdateHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.BeforeDeleteHook, specializationKitBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	specializationKitBeforeDeleteHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.AfterDeleteHook, specializationKitAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	specializationKitAfterDeleteHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.BeforeUpsertHook, specializationKitBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	specializationKitBeforeUpsertHooks = []SpecializationKitHook{}

	AddSpecializationKitHook(boil.AfterUpsertHook, specializationKitAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	specializationKitAfterUpsertHooks = []SpecializationKitHook{}
}

func testSpecializationKitsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpecializationKitsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(specializationKitColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpecializationKitsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpecializationKitsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpecializationKitSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpecializationKitsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SpecializationKits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	specializationKitDBTypes = map[string]string{`ID`: `int`, `DoctorID`: `int`, `SpecializationID`: `int`, `CertificateN`: `varchar`, `CertificateURL`: `text`, `Experience`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_                        = bytes.MinRead
)

func testSpecializationKitsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(specializationKitPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(specializationKitAllColumns) == len(specializationKitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSpecializationKitsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(specializationKitAllColumns) == len(specializationKitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SpecializationKit{}
	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, specializationKitDBTypes, true, specializationKitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(specializationKitAllColumns, specializationKitPrimaryKeyColumns) {
		fields = specializationKitAllColumns
	} else {
		fields = strmangle.SetComplement(
			specializationKitAllColumns,
			specializationKitPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SpecializationKitSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSpecializationKitsUpsert(t *testing.T) {
	t.Parallel()

	if len(specializationKitAllColumns) == len(specializationKitPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSpecializationKitUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SpecializationKit{}
	if err = randomize.Struct(seed, &o, specializationKitDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SpecializationKit: %s", err)
	}

	count, err := SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, specializationKitDBTypes, false, specializationKitPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SpecializationKit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SpecializationKit: %s", err)
	}

	count, err = SpecializationKits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
