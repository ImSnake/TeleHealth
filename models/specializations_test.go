// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSpecializations(t *testing.T) {
	t.Parallel()

	query := Specializations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSpecializationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Specializations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpecializationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpecializationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SpecializationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Specialization exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SpecializationExists to return true, but got false.")
	}
}

func testSpecializationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	specializationFound, err := FindSpecialization(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if specializationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSpecializationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Specializations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSpecializationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Specializations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSpecializationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	specializationOne := &Specialization{}
	specializationTwo := &Specialization{}
	if err = randomize.Struct(seed, specializationOne, specializationDBTypes, false, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}
	if err = randomize.Struct(seed, specializationTwo, specializationDBTypes, false, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = specializationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = specializationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Specializations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSpecializationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	specializationOne := &Specialization{}
	specializationTwo := &Specialization{}
	if err = randomize.Struct(seed, specializationOne, specializationDBTypes, false, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}
	if err = randomize.Struct(seed, specializationTwo, specializationDBTypes, false, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = specializationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = specializationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func specializationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func specializationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Specialization) error {
	*o = Specialization{}
	return nil
}

func testSpecializationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Specialization{}
	o := &Specialization{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, specializationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Specialization object: %s", err)
	}

	AddSpecializationHook(boil.BeforeInsertHook, specializationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	specializationBeforeInsertHooks = []SpecializationHook{}

	AddSpecializationHook(boil.AfterInsertHook, specializationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	specializationAfterInsertHooks = []SpecializationHook{}

	AddSpecializationHook(boil.AfterSelectHook, specializationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	specializationAfterSelectHooks = []SpecializationHook{}

	AddSpecializationHook(boil.BeforeUpdateHook, specializationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	specializationBeforeUpdateHooks = []SpecializationHook{}

	AddSpecializationHook(boil.AfterUpdateHook, specializationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	specializationAfterUpdateHooks = []SpecializationHook{}

	AddSpecializationHook(boil.BeforeDeleteHook, specializationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	specializationBeforeDeleteHooks = []SpecializationHook{}

	AddSpecializationHook(boil.AfterDeleteHook, specializationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	specializationAfterDeleteHooks = []SpecializationHook{}

	AddSpecializationHook(boil.BeforeUpsertHook, specializationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	specializationBeforeUpsertHooks = []SpecializationHook{}

	AddSpecializationHook(boil.AfterUpsertHook, specializationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	specializationAfterUpsertHooks = []SpecializationHook{}
}

func testSpecializationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpecializationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(specializationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpecializationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpecializationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpecializationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpecializationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Specializations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	specializationDBTypes = map[string]string{`ID`: `int`, `SpecName`: `varchar`}
	_                     = bytes.MinRead
)

func testSpecializationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(specializationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(specializationAllColumns) == len(specializationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSpecializationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(specializationAllColumns) == len(specializationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Specialization{}
	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, specializationDBTypes, true, specializationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(specializationAllColumns, specializationPrimaryKeyColumns) {
		fields = specializationAllColumns
	} else {
		fields = strmangle.SetComplement(
			specializationAllColumns,
			specializationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SpecializationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSpecializationsUpsert(t *testing.T) {
	t.Parallel()

	if len(specializationAllColumns) == len(specializationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSpecializationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Specialization{}
	if err = randomize.Struct(seed, &o, specializationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Specialization: %s", err)
	}

	count, err := Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, specializationDBTypes, false, specializationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Specialization struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Specialization: %s", err)
	}

	count, err = Specializations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
