// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnalyzes(t *testing.T) {
	t.Parallel()

	query := Analyzes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnalyzesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyzesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Analyzes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyzesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyzeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnalyzesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnalyzeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Analyze exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnalyzeExists to return true, but got false.")
	}
}

func testAnalyzesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	analyzeFound, err := FindAnalyze(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if analyzeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnalyzesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Analyzes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnalyzesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Analyzes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnalyzesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	analyzeOne := &Analyze{}
	analyzeTwo := &Analyze{}
	if err = randomize.Struct(seed, analyzeOne, analyzeDBTypes, false, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}
	if err = randomize.Struct(seed, analyzeTwo, analyzeDBTypes, false, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyzeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyzeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Analyzes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnalyzesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	analyzeOne := &Analyze{}
	analyzeTwo := &Analyze{}
	if err = randomize.Struct(seed, analyzeOne, analyzeDBTypes, false, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}
	if err = randomize.Struct(seed, analyzeTwo, analyzeDBTypes, false, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = analyzeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = analyzeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func analyzeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func analyzeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Analyze) error {
	*o = Analyze{}
	return nil
}

func testAnalyzesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Analyze{}
	o := &Analyze{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, analyzeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Analyze object: %s", err)
	}

	AddAnalyzeHook(boil.BeforeInsertHook, analyzeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	analyzeBeforeInsertHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.AfterInsertHook, analyzeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	analyzeAfterInsertHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.AfterSelectHook, analyzeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	analyzeAfterSelectHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.BeforeUpdateHook, analyzeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	analyzeBeforeUpdateHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.AfterUpdateHook, analyzeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	analyzeAfterUpdateHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.BeforeDeleteHook, analyzeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	analyzeBeforeDeleteHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.AfterDeleteHook, analyzeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	analyzeAfterDeleteHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.BeforeUpsertHook, analyzeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	analyzeBeforeUpsertHooks = []AnalyzeHook{}

	AddAnalyzeHook(boil.AfterUpsertHook, analyzeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	analyzeAfterUpsertHooks = []AnalyzeHook{}
}

func testAnalyzesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyzesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(analyzeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnalyzesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyzesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnalyzeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnalyzesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Analyzes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	analyzeDBTypes = map[string]string{`ID`: `int`, `PatientID`: `int`, `FileURL`: `text`, `CreatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testAnalyzesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(analyzePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(analyzeAllColumns) == len(analyzePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnalyzesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(analyzeAllColumns) == len(analyzePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Analyze{}
	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, analyzeDBTypes, true, analyzePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(analyzeAllColumns, analyzePrimaryKeyColumns) {
		fields = analyzeAllColumns
	} else {
		fields = strmangle.SetComplement(
			analyzeAllColumns,
			analyzePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnalyzeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnalyzesUpsert(t *testing.T) {
	t.Parallel()

	if len(analyzeAllColumns) == len(analyzePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAnalyzeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Analyze{}
	if err = randomize.Struct(seed, &o, analyzeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Analyze: %s", err)
	}

	count, err := Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, analyzeDBTypes, false, analyzePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Analyze struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Analyze: %s", err)
	}

	count, err = Analyzes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
