// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDoctors(t *testing.T) {
	t.Parallel()

	query := Doctors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDoctorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Doctors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoctorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDoctorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DoctorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Doctor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DoctorExists to return true, but got false.")
	}
}

func testDoctorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	doctorFound, err := FindDoctor(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if doctorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDoctorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Doctors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDoctorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Doctors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDoctorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	doctorOne := &Doctor{}
	doctorTwo := &Doctor{}
	if err = randomize.Struct(seed, doctorOne, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}
	if err = randomize.Struct(seed, doctorTwo, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doctorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doctorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doctors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDoctorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	doctorOne := &Doctor{}
	doctorTwo := &Doctor{}
	if err = randomize.Struct(seed, doctorOne, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}
	if err = randomize.Struct(seed, doctorTwo, doctorDBTypes, false, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = doctorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = doctorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func doctorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func doctorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Doctor) error {
	*o = Doctor{}
	return nil
}

func testDoctorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Doctor{}
	o := &Doctor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, doctorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Doctor object: %s", err)
	}

	AddDoctorHook(boil.BeforeInsertHook, doctorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	doctorBeforeInsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterInsertHook, doctorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	doctorAfterInsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterSelectHook, doctorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	doctorAfterSelectHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeUpdateHook, doctorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	doctorBeforeUpdateHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterUpdateHook, doctorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	doctorAfterUpdateHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeDeleteHook, doctorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	doctorBeforeDeleteHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterDeleteHook, doctorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	doctorAfterDeleteHooks = []DoctorHook{}

	AddDoctorHook(boil.BeforeUpsertHook, doctorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	doctorBeforeUpsertHooks = []DoctorHook{}

	AddDoctorHook(boil.AfterUpsertHook, doctorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	doctorAfterUpsertHooks = []DoctorHook{}
}

func testDoctorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoctorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(doctorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDoctorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoctorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DoctorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDoctorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Doctors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	doctorDBTypes = map[string]string{`ID`: `int`, `Surname`: `varchar`, `Name`: `varchar`, `Patronymic`: `varchar`, `Birthdate`: `date`, `Biography`: `text`, `Contacts`: `varchar`, `PhotoURL`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`, `Disabled`: `tinyint`}
	_             = bytes.MinRead
)

func testDoctorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDoctorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Doctor{}
	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, doctorDBTypes, true, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(doctorAllColumns, doctorPrimaryKeyColumns) {
		fields = doctorAllColumns
	} else {
		fields = strmangle.SetComplement(
			doctorAllColumns,
			doctorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DoctorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDoctorsUpsert(t *testing.T) {
	t.Parallel()

	if len(doctorAllColumns) == len(doctorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDoctorUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Doctor{}
	if err = randomize.Struct(seed, &o, doctorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doctor: %s", err)
	}

	count, err := Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, doctorDBTypes, false, doctorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Doctor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Doctor: %s", err)
	}

	count, err = Doctors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
